"use strict";(self.webpackChunkh3yun_pdocs=self.webpackChunkh3yun_pdocs||[]).push([[277],{8022:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>p});var n=a(641);const e=a.p+"assets/img/list-events-1.cdeb01d3.png",t=a.p+"assets/img/list-events-2.e313f52f.png",l={},h=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<p>列表页面中的所有操作，都需要在列表设计页面中编写代码，代码需要编写在各种事件内，当对应操作产生时，系统会自动触发事件，以执行用户的自定义代码。</p><h2 id="列表前端事件" tabindex="-1"><a class="header-anchor" href="#列表前端事件"><span>列表前端事件</span></a></h2><p>列表前端只有一个事件：<code>$.ListView.ActionPreDo</code>，在点击列表按钮时触发该事件，<code>actionCode</code> 参数为按钮编码。</p><h3 id="平台默认按钮" tabindex="-1"><a class="header-anchor" href="#平台默认按钮"><span>平台默认按钮</span></a></h3><ul><li>Create：新增</li><li>Import：导入</li><li>Export：导出</li><li>Remove：删除</li><li>PrintQrCode：打印二维码</li></ul><h3 id="配置自定义按钮" tabindex="-1"><a class="header-anchor" href="#配置自定义按钮"><span>配置自定义按钮：</span></a></h3><p><img src="'+e+'" alt="" width="1276" height="900"><img src="'+t+'" alt="" width="1582" height="678"></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>统计分析</strong> 按钮点击不经过该事件。</p></div><h3 id="actionpredo事件代码示例" tabindex="-1"><a class="header-anchor" href="#actionpredo事件代码示例"><span>ActionPreDo事件代码示例：</span></a></h3><div class="language-js line-numbers-mode has-collapsed collapsed" data-ext="js" data-title="js" style="--vp-collapsed-lines:15;"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//此处为列表按钮点击事件</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ListView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ActionPreDo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">actionCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    debugger</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //通过actionCode判断用户点击的是自定义按钮 MyBtn</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">actionCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;MyBtn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //获取列表选中数据</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> datas</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> $</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ListView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetSelected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">datas</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> datas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //当有选中数据时，取出选中数据的ObjectId值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> datas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">datas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ][ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ObjectId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] );</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //通过actionCode判断用户点击删除按钮</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">actionCode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Remove&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //弹出成功状态消息</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        $</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IShowSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;成功&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;点击了删除按钮！&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> );</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="列表后端事件" tabindex="-1"><a class="header-anchor" href="#列表后端事件"><span>列表后端事件</span></a></h2><p>列表后端共有3个事件，其中初始代码中会有2个事件：<code>OnLoad</code> 和 <code>OnSubmit</code>，还有一个 <code>OnInit</code> 事件在需要时由开发者自行添加到列表类中。</p><h3 id="列表后端onload事件" tabindex="-1"><a class="header-anchor" href="#列表后端onload事件"><span>列表后端OnLoad事件</span></a></h3><p><code>OnLoad</code> 为列表页数据加载事件，每次在加载列表数据时会触发 <code>OnLoad</code> 事件，比如：列表页初始打开、筛选条件变化、切换分页、按某列排序等，都会触发本事件。</p><p>其中 <code>base.OnLoad(response);</code> 为默认处理，有以下效果：</p><ol><li>根据请求中的筛选条件，查询数据并设置到 <code>response</code> 上，以响应给前端渲染</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>此行代码=&gt; <code>base.OnLoad(response);</code> 请保证触发 <code>OnLoad</code> 事件时都能得到执行（不要删除该行代码，尽量不要放在 <code>if</code> 判断体内），否则将失去以上列举的效果。</p></div><h3 id="列表后端onsubmit事件" tabindex="-1"><a class="header-anchor" href="#列表后端onsubmit事件"><span>列表后端OnSubmit事件</span></a></h3><p><code>OnSubmit</code> 在<strong>按钮点击</strong>或<strong>Post请求</strong>时触发，此事件的 <code>actionName</code> 参数非常重要，标识了触发来源。当按钮点击时，<code>actionName</code> 即按钮编码；当Post请求时，<code>actionName</code> 即前端自定义的请求活动名称。</p><p>其中 <code>base.OnSubmit(actionName, postValue, response);</code> 为默认处理，有以下效果：</p><ol><li><code>actionName</code> 为 <code>Remove</code>（即 删除）时，会根据请求中传递的用户选中数据Id，查询并删除对应数据，若删除的是生效数据，则内部自动触发作废的业务规则</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>此行代码=&gt; <code>base.OnSubmit(actionName, postValue, response);</code> 请保证触发 <code>OnSubmit</code> 事件时都能得到执行（不要删除该行代码，尽量不要放在 <code>if</code> 判断体内），否则将失去以上列举的效果。</p></div><h3 id="列表后端oninit事件" tabindex="-1"><a class="header-anchor" href="#列表后端oninit事件"><span>列表后端OnInit事件</span></a></h3><p>当列表页初始打开时，会触发 <code>OnInit</code> 事件，并且执行时机上比 <code>OnLoad</code> 更早一步（先加载列表页面再加载列表数据）。</p><p>这个事件主要用于设置列表初始按钮显示/隐藏、初始筛选条件、初始排序字段、初始分页设置等，这些操作都会在 <code>base.OnInit(response);</code> 中完成，所以如果要二次开发调整这些设置，也应该在 <code>base.OnInit(response);</code> 之后写代码。</p><h2 id="列表页加载时的事件触发顺序图" tabindex="-1"><a class="header-anchor" href="#列表页加载时的事件触发顺序图"><span>列表页加载时的事件触发顺序图</span></a></h2><blockquote><p>制作中...</p></blockquote><h2 id="列表按钮点击时的事件触发顺序图" tabindex="-1"><a class="header-anchor" href="#列表按钮点击时的事件触发顺序图"><span>列表按钮点击时的事件触发顺序图</span></a></h2><blockquote><p>制作中...</p></blockquote>',29)]))}]]),p=JSON.parse('{"path":"/docs/list-events/","title":"列表事件","lang":"zh-CN","frontmatter":{"title":"列表事件","createTime":"2025/02/12 17:55:47","permalink":"/docs/list-events/","tags":["列表","事件"],"description":"列表页面中的所有操作，都需要在列表设计页面中编写代码，代码需要编写在各种事件内，当对应操作产生时，系统会自动触发事件，以执行用户的自定义代码。 列表前端事件 列表前端只有一个事件：$.ListView.ActionPreDo，在点击列表按钮时触发该事件，actionCode 参数为按钮编码。 平台默认按钮 Create：新增 Import：导入 Exp...","head":[["meta",{"property":"og:url","content":"https://h3yunpro.github.io/h3yunpro.github.io/docs/list-events/"}],["meta",{"property":"og:site_name","content":"氚专开发者扩展文档"}],["meta",{"property":"og:title","content":"列表事件"}],["meta",{"property":"og:description","content":"列表页面中的所有操作，都需要在列表设计页面中编写代码，代码需要编写在各种事件内，当对应操作产生时，系统会自动触发事件，以执行用户的自定义代码。 列表前端事件 列表前端只有一个事件：$.ListView.ActionPreDo，在点击列表按钮时触发该事件，actionCode 参数为按钮编码。 平台默认按钮 Create：新增 Import：导入 Exp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T11:33:18.000Z"}],["meta",{"property":"article:tag","content":"列表"}],["meta",{"property":"article:tag","content":"事件"}],["meta",{"property":"article:modified_time","content":"2025-02-18T11:33:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"列表事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-18T11:33:18.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.92,"words":875},"git":{"updatedTime":1739878398000,"contributors":[{"name":"氚云-凡狐","username":"氚云-凡狐","email":"huca@authine.com","commits":1,"avatar":"https://avatars.githubusercontent.com/氚云-凡狐?v=4","url":"https://github.com/氚云-凡狐"}]},"autoDesc":true,"filePathRelative":"notes/docs/基础/列表事件.md"}')}}]);